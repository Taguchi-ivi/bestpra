name: build-and-test
on:
  push:
    branches:
      - github-actions-dev

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_BACKEND_NGINX: bestpra/backend-nginx
  ECR_REPOSITORY_BACKEND_RAILS: bestpra/backend-rails
  ECR_REPOSITORY_FRONTEND: bestpra/frontend
  # ECS_CLUSTER:
  ECS_SERVICE_BACKEND: bestpra-app-task-frontend
  ECS_SERVICE_FRONTEND: -app-task-backend
  # ECS_TASK_DEFINITION:
  CONTAINER_NAME_BACKEND_NGINX: bestpra-app-container-nginx-backend
  CONTAINER_NAME_BACKEND_RAILS: bestpra-app-container-rails-backend
  CONTAINER_NAME_FRONTEND: bestpra-app-container-frontend

jobs:
  # test
  test_backend:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    defaults:
      run:
        working-directory: backend
    services:
      mysql:
        image: mysql:8.0.31
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          BIND-ADDRESS: 0.0.0.0
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1.2"
          bundler-cache: true
          working-directory: backend
      - name: DB migration
        run: |
          cp config/database.yml.ci config/database.yml
          bundle exec rails db:create
          bundle exec rails db:migrate
      - name: Rspec
        run: bundle exec rspec

  test_front:
    name: test_frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - name: set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.1"
          cache: "yarn"
          cache-dependency-path: "frontend/package.json"
      - name: install
        run: yarn install
      - name: jest
        run: yarn run test

  # ECR deploy
  deploy_ecr_backend_nginx:
    needs: [test_backend, test_front]
    name: deploy_ecr_backend_nginx
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: backend/docker/nginx
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_NGINX }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/docker/nginx/Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy_ecr_backend_rails:
    needs: [test_backend, test_front]
    name: deploy_ecr_backend_rails
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: backend/docker/web
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_RAILS }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/docker/web/Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy_ecr_frontend:
    needs: [test_backend, test_front]
    name: deploy_ecr_frontend
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_FRONTEND }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # ECS update
  # ecs_update_backend:
  #   needs: [deploy_ecr_backend_nginx,deploy_ecr_backend_rails, deploy_ecr_frontend]
  #   name: ecs_update_backend
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #     - name: configure aws credentials
  #       uses: aws-actions/configure-aws-credentials@v1-node16
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

# ecs_update_frontend:
  #   needs: [deploy_ecr_backend_nginx,deploy_ecr_backend_rails, deploy_ecr_frontend]
  #   name: ecs_update_frontend
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:

# - name: Login to Amazon ECR
#   id: login-ecr
#   uses: aws-actions/amazon-ecr-login@v1
# - name: Download task definition
#   run: |
#     aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json
# - name: Render Amazon ECS task definition for first container
#   id: render-container-httpd
#   uses: aws-actions/amazon-ecs-render-task-definition@v1
#   with:
#     task-definition: task-definition.json
#     container-name: ${{ env.CONTAINER_NAME_HTTPD }}
#     image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.Build1.outputs.image }}
# - name: Modify Amazon ECS task definition with second container
#   id: render-container-node
#   uses: aws-actions/amazon-ecs-render-task-definition@v1
#   with:
#     task-definition: ${{ steps.render-container-httpd.outputs.task-definition }}
#     container-name: ${{ env.CONTAINER_NAME_NODE }}
#     image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.Build2.outputs.image }}

# - name: Deploy Amazon ECS task definition
#   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#   with:
#     task-definition: ${{ steps.render-container-node.outputs.task-definition }}
#     service: ${{ env.ECS_SERVICE }}
#     cluster: ${{ env.ECS_CLUSTER }}
#     wait-for-service-stability: true

# slack