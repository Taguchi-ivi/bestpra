name: build-and-test
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_BACKEND_NGINX: bestpra/backend-nginx
  ECR_REPOSITORY_BACKEND_RAILS: bestpra/backend-rails
  ECR_REPOSITORY_FRONTEND: bestpra/frontend
  ECS_SERVICE_BACKEND: bestpra-backend
  ECS_SERVICE_FRONTEND: bestpra-frontend
  ECS_TASK_DEFINITION_BACKEND: bestpra-app-task-backend
  ECS_TASK_DEFINITION_FRONTEND: bestpra-app-task-frontend
  CONTAINER_NAME_BACKEND_NGINX: bestpra-app-container-nginx-backend
  CONTAINER_NAME_BACKEND_RAILS: bestpra-app-container-rails-backend
  CONTAINER_NAME_FRONTEND: bestpra-app-container-frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # test
  test_backend:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
    defaults:
      run:
        working-directory: backend
    services:
      mysql:
        image: mysql:8.0.31
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          BIND-ADDRESS: 0.0.0.0
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - name: set up ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1.2"
          bundler-cache: true
          working-directory: backend
      - name: DB migration
        run: |
          cp config/database.yml.ci config/database.yml
          bundle exec rails db:create
          bundle exec rails db:migrate
      - name: Rspec
        run: bundle exec rspec

  test_front:
    name: test_frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - name: set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.1"
          cache: "yarn"
          cache-dependency-path: "frontend/package.json"
      - name: install
        run: yarn install
      - name: jest
        run: yarn run test

  # ECR deploy
  deploy_ecr_backend_nginx:
    needs: [test_backend, test_front]
    name: deploy_ecr_backend_nginx
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend-nginx-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: backend
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_NGINX }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} -f docker/nginx/Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy_ecr_backend_rails:
    needs: [test_backend, test_front]
    name: deploy_ecr_backend_rails
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend-rails-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: backend
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_RAILS }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} -f docker/web/Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy_ecr_frontend:
    needs: [test_backend, test_front]
    name: deploy_ecr_frontend
    runs-on: ubuntu-latest
    environment: production
    outputs:
      frontend-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_FRONTEND }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} -f Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  # ECS update
  ecs_update_backend:
    needs: [deploy_ecr_backend_nginx, deploy_ecr_backend_rails, deploy_ecr_frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_BACKEND --query taskDefinition > task-definition-backend.json

      - name: render ecs task definition for first container
        id: render-container-backend-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: ${{ env.CONTAINER_NAME_BACKEND_NGINX }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_backend_nginx.outputs.backend-nginx-image }}
      - name: render ecs task definition for second container
        id: render-container-backend-rails
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend-nginx.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND_RAILS }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_backend_rails.outputs.backend-rails-image }}

      - name: Deploy ECS task backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend-rails.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  ecs_update_frontend:
    needs: [deploy_ecr_backend_nginx,deploy_ecr_backend_rails, deploy_ecr_frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FRONTEND --query taskDefinition > task-definition-frontend.json

      - name: render ecs task definition for frontend container
        id: render-container-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-frontend.json
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_frontend.outputs.frontend-image }}

      - name: Deploy ECS task frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  # slack
  # send-slack:
  #   needs: [ecs_update_backend, ecs_update_frontend]
  #   name: Slack Notification
  #   if: always()
  #   env:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
  #     SLACK_USERNAME: DeployBot
  #     SLACK_CHANNEL: sendbox
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     # 成功
  #     - name: Slack Notification on Success
  #       if: ${{ success() }}
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_TITLE: Deploy Success
  #         SLACK_COLOR: good

  #     # 失敗
  #     - name: Slack Notification on Failure
  #       if: ${{ failure() }}
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_TITLE: Deploy Failure
  #         SLACK_COLOR: danger